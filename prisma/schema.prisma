generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password_hash   String
  created_at      DateTime        @default(now())
  is_active       Boolean         @default(true)
  role            String          @default("USER")
  updated_at      DateTime        @updatedAt
  document_number String          @unique
  document_type   DocumentType
  firstName       String
  lastName        String
  phone           String
  addresses       Address[]
  shares          SharesOnUsers[]
  assets          Asset[]         @relation("UserAssets")

  @@map("users")
}

model Address {
  id           String   @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zip_code     String
  country      String   @default("Brasil")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user_id      String?
  asset_id     String?
  asset        Asset?   @relation(fields: [asset_id], references: [id])
  user         User?    @relation(fields: [user_id], references: [id])

  @@map("addresses")
}

model Asset {
  id           String    @id @default(uuid())
  type         AssetType
  name         String
  location     String
  description  String?
  total_shares Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  value        Float
  addresses    Address[]
  seasons      Season[]
  shares       Share[]
  users        User[]    @relation("UserAssets")

  @@map("assets")
}

model Share {
  id             String          @id @default(uuid())
  asset_id       String
  current_season SeasonType
  season_order   Int
  current_year   Int
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  asset          Asset           @relation(fields: [asset_id], references: [id])
  users          SharesOnUsers[]
  uses           Use[]

  @@map("shares")
}

model Use {
  id         String    @id @default(uuid())
  share_id   String
  start_date DateTime
  end_date   DateTime
  status     UseStatus
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  share      Share     @relation(fields: [share_id], references: [id])

  @@map("uses")
}

model SharesOnUsers {
  user_id    String
  share_id   String
  created_at DateTime @default(now())
  share      Share    @relation(fields: [share_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([user_id, share_id])
  @@map("shares_users")
}

model Season {
  id         String     @id @default(uuid())
  asset_id   String
  type       SeasonType
  start_date DateTime
  end_date   DateTime
  year       Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  asset      Asset      @relation(fields: [asset_id], references: [id])

  @@map("seasons")
}

enum AssetType {
  PROPERTY
  NAUTICAL
}

enum SeasonType {
  HIGH
  MEDIUM
  LOW
}

enum UseStatus {
  CONFIRMED
  AVAILABLE_FOR_RENT
  RENTED
  CANCELLED
}

enum DocumentType {
  CPF
  CNPJ
}
